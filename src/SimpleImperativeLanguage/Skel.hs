-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SimpleImperativeLanguage.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified SimpleImperativeLanguage.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: SimpleImperativeLanguage.Abs.Ident -> Result
transIdent x = case x of
  SimpleImperativeLanguage.Abs.Ident string -> failure x

transIntExp :: SimpleImperativeLanguage.Abs.IntExp -> Result
transIntExp x = case x of
  SimpleImperativeLanguage.Abs.Exp integer -> failure x
  SimpleImperativeLanguage.Abs.Var ident -> failure x
  SimpleImperativeLanguage.Abs.UMinus intexp -> failure x
  SimpleImperativeLanguage.Abs.Plus intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.Minus intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.Times intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.Div intexp1 intexp2 -> failure x

transBoolExp :: SimpleImperativeLanguage.Abs.BoolExp -> Result
transBoolExp x = case x of
  SimpleImperativeLanguage.Abs.BTrue -> failure x
  SimpleImperativeLanguage.Abs.BFalse -> failure x
  SimpleImperativeLanguage.Abs.Eq intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.NEq intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.Lt intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.Gt intexp1 intexp2 -> failure x
  SimpleImperativeLanguage.Abs.And boolexp1 boolexp2 -> failure x
  SimpleImperativeLanguage.Abs.Or boolexp1 boolexp2 -> failure x
  SimpleImperativeLanguage.Abs.Not boolexp -> failure x
  SimpleImperativeLanguage.Abs.VarBool ident -> failure x

transComm :: SimpleImperativeLanguage.Abs.Comm -> Result
transComm x = case x of
  SimpleImperativeLanguage.Abs.Skip -> failure x
  SimpleImperativeLanguage.Abs.LetInt ident intexp -> failure x
  SimpleImperativeLanguage.Abs.LetBool ident boolexp -> failure x
  SimpleImperativeLanguage.Abs.AssInt ident intexp -> failure x
  SimpleImperativeLanguage.Abs.AssBool ident boolexp -> failure x
  SimpleImperativeLanguage.Abs.Seq comm1 comm2 -> failure x
  SimpleImperativeLanguage.Abs.IfThenElse boolexp comm1 comm2 -> failure x
  SimpleImperativeLanguage.Abs.While boolexp comm -> failure x
