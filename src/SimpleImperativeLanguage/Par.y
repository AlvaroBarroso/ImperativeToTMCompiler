-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module SimpleImperativeLanguage.Par
  ( happyError
  , myLexer
  , pComm
  ) where

import Prelude

import qualified SimpleImperativeLanguage.Abs
import SimpleImperativeLanguage.Lex

}

%name pComm Comm
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)  }
  '!='     { PT _ (TS _ 2)  }
  '&&'     { PT _ (TS _ 3)  }
  '('      { PT _ (TS _ 4)  }
  ')'      { PT _ (TS _ 5)  }
  '*'      { PT _ (TS _ 6)  }
  '+'      { PT _ (TS _ 7)  }
  '-'      { PT _ (TS _ 8)  }
  '/'      { PT _ (TS _ 9)  }
  ';'      { PT _ (TS _ 10) }
  '<'      { PT _ (TS _ 11) }
  '='      { PT _ (TS _ 12) }
  '=='     { PT _ (TS _ 13) }
  '>'      { PT _ (TS _ 14) }
  'else'   { PT _ (TS _ 15) }
  'false'  { PT _ (TS _ 16) }
  'if'     { PT _ (TS _ 17) }
  'let'    { PT _ (TS _ 18) }
  'skip'   { PT _ (TS _ 19) }
  'true'   { PT _ (TS _ 20) }
  'while'  { PT _ (TS _ 21) }
  '{'      { PT _ (TS _ 22) }
  '||'     { PT _ (TS _ 23) }
  '}'      { PT _ (TS _ 24) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }

%%

Ident :: { SimpleImperativeLanguage.Abs.Ident }
Ident  : L_Ident { SimpleImperativeLanguage.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

IntExp :: { SimpleImperativeLanguage.Abs.IntExp }
IntExp
  : Integer { SimpleImperativeLanguage.Abs.Exp $1 }
  | Ident { SimpleImperativeLanguage.Abs.Var $1 }
  | '-' IntExp { SimpleImperativeLanguage.Abs.UMinus $2 }
  | IntExp '+' IntExp { SimpleImperativeLanguage.Abs.Plus $1 $3 }
  | IntExp '-' IntExp { SimpleImperativeLanguage.Abs.Minus $1 $3 }
  | IntExp '*' IntExp { SimpleImperativeLanguage.Abs.Times $1 $3 }
  | IntExp '/' IntExp { SimpleImperativeLanguage.Abs.Div $1 $3 }

BoolExp :: { SimpleImperativeLanguage.Abs.BoolExp }
BoolExp
  : 'true' { SimpleImperativeLanguage.Abs.BTrue }
  | 'false' { SimpleImperativeLanguage.Abs.BFalse }
  | IntExp '==' IntExp { SimpleImperativeLanguage.Abs.Eq $1 $3 }
  | IntExp '!=' IntExp { SimpleImperativeLanguage.Abs.NEq $1 $3 }
  | IntExp '<' IntExp { SimpleImperativeLanguage.Abs.Lt $1 $3 }
  | IntExp '>' IntExp { SimpleImperativeLanguage.Abs.Gt $1 $3 }
  | BoolExp '&&' BoolExp { SimpleImperativeLanguage.Abs.And $1 $3 }
  | BoolExp '||' BoolExp { SimpleImperativeLanguage.Abs.Or $1 $3 }
  | '!' BoolExp { SimpleImperativeLanguage.Abs.Not $2 }
  | Ident { SimpleImperativeLanguage.Abs.VarBool $1 }

Comm :: { SimpleImperativeLanguage.Abs.Comm }
Comm
  : 'skip' { SimpleImperativeLanguage.Abs.Skip }
  | 'let' Ident '=' IntExp { SimpleImperativeLanguage.Abs.LetInt $2 $4 }
  | 'let' Ident '=' BoolExp { SimpleImperativeLanguage.Abs.LetBool $2 $4 }
  | Ident '=' IntExp { SimpleImperativeLanguage.Abs.AssInt $1 $3 }
  | Ident '=' BoolExp { SimpleImperativeLanguage.Abs.AssBool $1 $3 }
  | Comm ';' Comm { SimpleImperativeLanguage.Abs.Seq $1 $3 }
  | 'if' '(' BoolExp ')' Comm 'else' Comm { SimpleImperativeLanguage.Abs.IfThenElse $3 $5 $7 }
  | 'while' '(' BoolExp ')' '{' Comm '}' { SimpleImperativeLanguage.Abs.While $3 $6 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

