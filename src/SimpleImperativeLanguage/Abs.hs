-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language SimpleImperativeLanguage.

module SimpleImperativeLanguage.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data IntExp
    = Exp Integer
    | Var Ident
    | UMinus IntExp
    | Plus IntExp IntExp
    | Minus IntExp IntExp
    | Times IntExp IntExp
    | Div IntExp IntExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BoolExp
    = BTrue
    | BFalse
    | Eq IntExp IntExp
    | NEq IntExp IntExp
    | Lt IntExp IntExp
    | Gt IntExp IntExp
    | And BoolExp BoolExp
    | Or BoolExp BoolExp
    | Not BoolExp
    | VarBool Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Comm
    = Skip
    | LetInt Ident IntExp
    | LetBool Ident BoolExp
    | AssInt Ident IntExp
    | AssBool Ident BoolExp
    | Seq Comm Comm
    | IfThenElse BoolExp Comm Comm
    | While BoolExp Comm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

